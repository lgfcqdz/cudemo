pipeline {
    agent any
    options {
        timeout(time: 30, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    parameters {
        choice(name: 'TEST_TAGS', choices: ['@Smoke', '@Regression', '@All'], description: '选择测试标签')
    }

    environment {
        // 使用 Jenkins 提供的 WORKSPACE 环境变量
        BASE_DIR = "${env.ReportPath}/target"
        TEST_TAGS = "${params.TEST_TAGS}"
        REPORT_DIR = "${BASE_DIR}/reports"
    }

    stages {
        stage('System Check') {
            steps {
                script {
                    echo "当前工作空间: ${env.WORKSPACE}"
                    sh 'whoami' // 检查执行用户
                    sh 'echo 磁盘空间信息: && df -h'  // 检查磁盘空间
                    sh 'echo 当前目录权限: && icacls .' // Windows 权限检查
                }
            }
        }

        stage('Network Check') {
            steps {
                script {
                    sh 'echo 网络连通性测试: && ping -n 4 github.com'  // Windows
                }
            }
        }

        stage('Checkout') {
            steps {
                script {
                    try {
                        // 添加 Git 凭证信息
                        withCredentials([
                            usernamePassword(
                                credentialsId: 'cebed23e-84ed-4a10-b037-3b437e051553', // 需要在 Jenkins 中配置的凭证ID
                                usernameVariable: 'GIT_USERNAME',
                                passwordVariable: 'GIT_TOKEN'
                            )
                        ]) {
                            // 使用带凭证的 Git URL
                            sh "git config --global url.\"https://${GIT_USERNAME}:${GIT_TOKEN}@github.com\".insteadOf https://github.com"
                            checkout scm
                        }

                        sh 'git branch'  // 打印当前分支信息
                        sh 'git log -1 --oneline'  // 打印最新提交
                    } catch (Exception e) {
                        echo "检出失败: ${e}"
                        error "检出失败: ${e}"  // 抛出错误，终止流水线
                    }
                }
            }
        }

        stage('Build') {
            steps {
                sh 'mvn clean compile'  // 编译项目
            }
        }

        stage('Debug Info') {
            steps {
                script {
                    echo "TEST_TAGS: ${TEST_TAGS}"
                    echo "报告目录: ${REPORT_DIR}"
                    sh 'mvn --version'
                    sh 'java -version'
                    sh 'pwd'
                    sh 'ls -la'

                    // 创建报告目录
                    sh "mkdir -p ${REPORT_DIR}"
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    sh """
                        echo "执行测试命令..."
                        echo "标签: ${TEST_TAGS}"

                        mvn test \\
                            -Dtest=TestRunner \\
                            -Dcucumber.filter.tags="${TEST_TAGS}" \\
                            -Dcucumber.plugin="html:${REPORT_DIR}/report.html"
                    """
                }
            }
            post {
                always {
                    script {
                        // 检查报告是否存在再尝试发布
                        if (fileExists("${REPORT_DIR}/report.html")) {
                            publishHTML(target: [
                                allowMissing: false,
                                alwaysLinkToLastBuild: true,
                                keepAll: true,
                                reportDir: "${REPORT_DIR}",
                                reportFiles: 'report.html',
                                reportName: 'Test Report'
                            ])
                        } else {
                            echo "警告：HTML 测试报告未生成"
                        }

                        // 检查JUnit报告
                        junit allowEmptyResults: true,
                              testResults: "${BASE_DIR}/surefire-reports/*.xml"

                        // 收集日志
                        archiveArtifacts artifacts: "${BASE_DIR}/logs/*.log",
                                      allowEmptyArchive: true
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                // 清理工作空间（保留报告）
                cleanWs(
                    cleanWhenAborted: true,
                    cleanWhenFailure: true,
                    cleanWhenNotBuilt: true,
                    cleanWhenUnstable: true,
                    deleteDirs: true,
                    notFailBuild: true
                )
            }
        }
        success {
            slackSend(color: 'good',
                     message: "✅ Tests Passed: ${env.JOB_NAME} #${env.BUILD_NUMBER}")
        }
        failure {
            slackSend(color: 'danger',
                     message: "❌ Tests Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}")
        }
    }
}
